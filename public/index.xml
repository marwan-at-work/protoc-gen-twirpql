<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>  on TWIRPQL</title>
    <link>/</link>
    <description>Recent content in   on TWIRPQL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 01 May 2019 15:14:39 +1000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Install TWIRPQL</title>
      <link>/docs/install/</link>
      <pubDate>Mon, 11 Feb 2019 19:27:37 +1000</pubDate>
      
      <guid>/docs/install/</guid>
      <description>In order to use TWIRPQL you need to:  Install the Go toolchain (1.12+). Install the latest version of the Protobuf Compiler (v3.8+) Install the Twirp plugin:
GO111MODULE=on go install github.com/twitchtv/twirp/protoc-gen-twirp@v5.7.0
 Install the TWIRPQL plugin:
GO111MODULE=on go install marwna.io/twirpql
  Next: Quick Start</description>
    </item>
    
    <item>
      <title>Quick Start</title>
      <link>/docs/quick-start/</link>
      <pubDate>Mon, 11 Feb 2019 19:27:37 +1000</pubDate>
      
      <guid>/docs/quick-start/</guid>
      <description>Once you installed all the required depepndencies, this page will guide you through an end-to-end example.
Create a new project ~ export GO111MODULE=on # no need to do this if you ar eoutside of GOPATH ~ mkdir hello &amp;amp;&amp;amp; cd hello &amp;amp;&amp;amp; go mod init hello Define your Twirp Service Create a file named service.proto and populate it with the following:
syntax = &amp;quot;proto3&amp;quot;; package hello; option go_package = &amp;quot;hello&amp;quot;; service Service { rpc Hello(HelloReq) returns (HelloResp); } message HelloReq { string name = 1; } message HelloResp { string text = 1; }  Generate Go/Twirp Files Before you can generate a TWIRPQL layer, you need to generate the .</description>
    </item>
    
  </channel>
</rss>