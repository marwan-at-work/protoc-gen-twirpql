schema {
	query: Query
}

type Query {
	hello(req: HelloReq): HelloResp!
	trafficJam(req: TrafficJamReq): TrafficJamResp!
	getPainters: PaintersResp!
	translate(req: TranslateReq): TranslateResp!
	bread(req: BreadReq): BreadResp!
}

type BreadResp {
	answer: BreadRespAnswer!
}

type BreadRespAnswerName {
	name: String!
}

type BreadRespAnswerToasted {
	toasted: Boolean!
}

type HelloResp {
	text: String!
}

type PaintersResp {
	bestPainter: Painters_Painter!
	allPainters: [String]!
}

type Painters_Painter {
	name: String!
}

type TrafficJamResp {
	next: TrafficLight!
}

type TranslateResp {
	translations: Translations!
}

input BreadReq {
	count: Int!
}

input HelloReq {
	name: String!
}

input TrafficJamReq {
	color: TrafficLight!
}

input TranslateReq {
	words: Words!
}

enum TrafficLight {
	RED
	YELLOW
	GREEN
}

scalar Translations

scalar Words

union BreadRespAnswer = BreadRespAnswerName | BreadRespAnswerToasted
